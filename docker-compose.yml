services:
  # SonarQube service
  sonarqube:
    image: sonarqube:community
    container_name: autheo-devhub-sonarqube
    read_only: true
    depends_on:
      sonarqube-db:
        condition: service_healthy
    environment:
      SONAR_JDBC_URL: jdbc:postgresql://sonarqube-db:5432/sonar
      SONAR_JDBC_USERNAME: sonar
      SONAR_JDBC_PASSWORD: sonar
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs
      - sonarqube_temp:/opt/sonarqube/temp
    ports:
      - "9090:9000"  # Changed from 9000:9000 to avoid potential conflicts
    networks:
      - autheo-devhub
      
  # PostgreSQL 17 for SonarQube
  sonarqube-db:
    image: postgres:17
    container_name: autheo-devhub-sonarqube-db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sonar"]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      POSTGRES_USER: sonar
      POSTGRES_PASSWORD: sonar
      POSTGRES_DB: sonar
    volumes:
      - sonarqube_postgresql:/var/lib/postgresql
      - sonarqube_postgresql_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"  # Map to different external port to avoid conflict with main postgres
    networks:
      - autheo-devhub
      
  webui:
    build:
      context: ./webui
      dockerfile: Dockerfile
      args:
        - NODE_ENV=development
        - DEBUG=vite:*
    container_name: autheo-devhub-webui
    restart: always
    ports:
      - "80:80"  # Changed from 8000:80 as requested
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:80"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - autheo-devhub
      
  mattermost:
    image: mattermost/mattermost-team-edition:latest
    container_name: autheo-devhub-mattermost
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      # Database settings
      - MM_SQLSETTINGS_DRIVERNAME=postgres
      - MM_SQLSETTINGS_DATASOURCE=postgres://postgres:autheo_secure_pass@postgres:5432/mattermost?sslmode=disable
      
      # Server settings
      - MM_SERVICESETTINGS_SITEURL=http://localhost:8085
      - MM_SERVICESETTINGS_LISTENADDRESS=:8000
      
      # File storage settings
      - MM_FILESETTINGS_DRIVERNAME=local
      - MM_FILESETTINGS_DIRECTORY=/mattermost/data
      
      # Log settings
      - MM_LOGSETTINGS_ENABLECONSOLE=true
      - MM_LOGSETTINGS_CONSOLELEVEL=INFO
      - MM_LOGSETTINGS_ENABLEFILE=true
      - MM_LOGSETTINGS_FILELEVEL=INFO
      - MM_LOGSETTINGS_FILEFORMAT=json
      
      # Plugin settings
      - MM_PLUGINSETTINGS_ENABLE=true
      - MM_PLUGINSETTINGS_DIRECTORY=/mattermost/plugins
      - MM_PLUGINSETTINGS_CLIENTDIRECTORY=/mattermost/client/plugins
    ports:
      - "8085:8000"
    volumes:
      - mattermost-data:/mattermost/data
      - mattermost-logs:/mattermost/logs
      - mattermost-config:/mattermost/config
      - mattermost-plugins:/mattermost/plugins
      - mattermost-client-plugins:/mattermost/client/plugins
    networks:
      - autheo-devhub

  postgres:
    image: postgres:14
    container_name: autheo-devhub-postgres
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=autheo_secure_pass
      - POSTGRES_MULTIPLE_DATABASES=gitea,openproject,n8n,mattermost
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-multiple-dbs.sh:/docker-entrypoint-initdb.d/init-multiple-dbs.sh
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - autheo-devhub

  openproject:
    image: openproject/openproject:15.3.0
    container_name: autheo-devhub-openproject
    environment:
      - DATABASE_URL=postgres://openproject:openproject@postgres:5432/openproject
      - RAILS_CACHE_STORE=memcache
      - RAILS_CACHE_STORE_URL=memcached:11211
      - RAILS_MIN_THREADS=4
      - RAILS_MAX_THREADS=16
      - RAILS_SERVE_STATIC_FILES=true
      - OPENPROJECT_HTTPS=false
      - OPENPROJECT_HOST__NAME=localhost:8081
    ports:
      - "8081:8080"
    depends_on:
      postgres:
        condition: service_healthy
      memcached:
        condition: service_started
    networks:
      - autheo-devhub

  memcached:
    image: memcached:1.6
    container_name: autheo-devhub-memcached
    command: ["-m", "64"]
    healthcheck:
      test: ["CMD-SHELL", "echo stats | nc localhost 11211"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - autheo-devhub

  gitea:
    build:
      context: ./gitea/webui
      dockerfile: Dockerfile
      args:
        - TAGS=sqlite sqlite_unlock_notify
    container_name: autheo-devhub-gitea
    environment:
      - DB_TYPE=postgres
      - DB_HOST=postgres
      - DB_NAME=gitea
      - DB_USER=gitea
      - DB_PASSWD=gitea
      - USER_UID=1000
      - USER_GID=1000
      - GITEA__ui__DEFAULT_THEME=gitea
      - GITEA__ui__THEMES=gitea,arc-green,custom
      - GITEA__server__LANDING_PAGE=explore
    volumes:
      - gitea_data:/data
      - ./gitea/frontend/dist:/data/gitea/public/custom
      - ./gitea/frontend/templates:/data/gitea/templates/custom
    ports:
      - "8082:3000"
      - "2222:22"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - autheo-devhub
    restart: always

  n8n:
    image: n8nio/n8n:latest
    container_name: autheo-devhub-n8n
    restart: always
    environment:
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_DATABASE=n8n
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_USER=n8n
      - DB_POSTGRESDB_PASSWORD=n8n
      - N8N_HOST=localhost
      - N8N_PORT=8083
      - N8N_PROTOCOL=http
      - N8N_USER_MANAGEMENT_DISABLED=false
      - N8N_BASIC_AUTH_ACTIVE=false
      - N8N_SECURE_COOKIE=false
      - N8N_ENCRYPTION_KEY=a-random-32-character-string-here
      - NODE_ENV=production
      - WEBHOOK_URL=http://localhost:8083/
      - GENERIC_TIMEZONE=America/Denver
      - N8N_EMAIL_MODE=smtp
      - N8N_SMTP_HOST=${SMTP_HOST:-smtp.example.com}
      - N8N_SMTP_PORT=${SMTP_PORT:-587}
      - N8N_SMTP_USER=${SMTP_USER:-your-email@example.com}
      - N8N_SMTP_PASS=${SMTP_PASSWORD:-your-smtp-password}
      - N8N_SMTP_SENDER=${SMTP_SENDER:-your-email@example.com}
    ports:
      - "8083:8083"
    volumes:
      - n8n_data:/home/node/.n8n
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - autheo-devhub
      
  # Flowise - AI workflow automation
  flowise:
    image: flowiseai/flowise:latest
    container_name: autheo-devhub-flowise
    restart: unless-stopped
    ports:
      - "13000:13000"
    environment:
      - PORT=13000
      - HOST=0.0.0.0
      - FLOWISE_USERNAME=admin
      - FLOWISE_PASSWORD=password
      - DATABASE_PATH=/root/.flowise
      - APIKEY_PATH=/root/.flowise
      - SECRETKEY_PATH=/root/.flowise
      - LOG_PATH=/root/.flowise/logs
      # Vector database connection variables
      - MILVUS_URL=milvus:19530
      - QDRANT_URL=http://qdrant:6333
      - REDIS_URL=redis://flowise-redis:6379
      - ELASTICSEARCH_URL=http://flowise-elasticsearch:9200
      - CHROMA_URL=http://chroma:8000
    volumes:
      - flowise-data:/root/.flowise
    networks:
      - autheo-devhub
    depends_on:
      - milvus
      - qdrant
      - flowise-redis
      - flowise-elasticsearch
      - chroma

  # Milvus vector database for Flowise
  milvus:
    image: milvusdb/milvus:v2.3.3
    container_name: autheo-devhub-milvus
    restart: unless-stopped
    ports:
      - "19530:19530"
      - "9091:9091"
    environment:
      - ETCD_ENDPOINTS=etcd:2379
      - MINIO_ADDRESS=minio:9000
    volumes:
      - milvus-data:/var/lib/milvus/data
      - milvus-conf:/var/lib/milvus/conf
      - milvus-logs:/var/lib/milvus/logs
    networks:
      - autheo-devhub
    depends_on:
      - etcd
      - minio
    command: ["milvus", "run", "standalone"]

  # Etcd for Milvus
  etcd:
    image: quay.io/coreos/etcd:v3.5.5
    container_name: autheo-devhub-etcd
    restart: unless-stopped
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    volumes:
      - etcd-data:/etcd
    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    networks:
      - autheo-devhub

  # MinIO for Milvus
  minio:
    image: minio/minio:RELEASE.2023-03-20T20-16-18Z
    container_name: autheo-devhub-minio
    restart: unless-stopped
    environment:
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
    volumes:
      - minio-data:/minio_data
    command: minio server /minio_data
    networks:
      - autheo-devhub

  # Qdrant vector database for Flowise
  qdrant:
    image: qdrant/qdrant:v1.6.1
    container_name: autheo-devhub-qdrant
    restart: unless-stopped
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant-data:/qdrant/storage
    networks:
      - autheo-devhub

  # Redis for Flowise
  flowise-redis:
    image: redis:7.2
    container_name: autheo-devhub-flowise-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - flowise-redis-data:/data
    command: redis-server --save 60 1 --loglevel warning
    networks:
      - autheo-devhub

  # Elasticsearch for Flowise
  flowise-elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.1
    container_name: autheo-devhub-flowise-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - flowise-elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - autheo-devhub

  # Chroma vector database for Flowise
  chroma:
    image: chromadb/chroma:0.4.22
    container_name: autheo-devhub-chroma
    restart: unless-stopped
    environment:
      - ALLOW_RESET=true
      - CHROMA_SERVER_AUTH_CREDENTIALS_FILE=
      - CHROMA_SERVER_AUTH_CREDENTIALS=admin:admin
      - CHROMA_SERVER_AUTH_PROVIDER=basic
    volumes:
      - chroma-data:/chroma/chroma
    ports:
      - "8000:8000"
    networks:
      - autheo-devhub

volumes:
  # SonarQube volumes
  sonarqube_data:
    name: autheo-devhub-sonarqube-data
  sonarqube_extensions:
    name: autheo-devhub-sonarqube-extensions
  sonarqube_logs:
    name: autheo-devhub-sonarqube-logs
  sonarqube_temp:
    name: autheo-devhub-sonarqube-temp
  sonarqube_postgresql:
    name: autheo-devhub-sonarqube-postgresql
  sonarqube_postgresql_data:
    name: autheo-devhub-sonarqube-postgresql-data
  
  postgres_data:
    name: autheo-devhub-postgres-data
  gitea_data:
    name: autheo-devhub-gitea-data
  n8n_data:
    name: autheo-devhub-n8n-data
  mattermost-data:
    name: autheo-devhub-mattermost-data
  mattermost-logs:
    name: autheo-devhub-mattermost-logs
  mattermost-config:
    name: autheo-devhub-mattermost-config
  mattermost-plugins:
    name: autheo-devhub-mattermost-plugins
  mattermost-client-plugins:
    name: autheo-devhub-mattermost-client-plugins
  # Flowise volumes
  flowise-data:
    name: autheo-devhub-flowise-data
  milvus-data:
    name: autheo-devhub-milvus-data
  milvus-conf:
    name: autheo-devhub-milvus-conf
  milvus-logs:
    name: autheo-devhub-milvus-logs
  etcd-data:
    name: autheo-devhub-etcd-data
  minio-data:
    name: autheo-devhub-minio-data
  qdrant-data:
    name: autheo-devhub-qdrant-data
  flowise-redis-data:
    name: autheo-devhub-flowise-redis-data
  flowise-elasticsearch-data:
    name: autheo-devhub-flowise-elasticsearch-data
  chroma-data:
    name: autheo-devhub-chroma-data

networks:
  autheo-devhub:
    name: autheo-devhub-network
    driver: bridge